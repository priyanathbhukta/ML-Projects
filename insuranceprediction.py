# -*- coding: utf-8 -*-
"""InsurancePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oj3xbMiUs8uvsQvSJCMH-dhtpkWs-Chc

*italicized text*

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data Collection and Analysis"""

#loading the data from csv file to a Pandas Dataframe
insurance_dataset = pd.read_csv('/content/insurance.csv')

#first 5 rows of the Dataframe
insurance_dataset.head()

#number of rows and columns
insurance_dataset.shape

#getting information about the Dataset
insurance_dataset.info()

"""Categorical Features:
- sex
- smoker
- **region**
"""

#checking for missing values
insurance_dataset.isnull().sum()

"""Data Analysis"""

#Statistical Measures of the dataset
insurance_dataset.describe()

# distribution of age values
sns.set()
plt.figure(figsize=(6,6))
sns.displot(insurance_dataset['age'])
plt.title('Age Distribution')
plt.show()

# GENDER COLUMN
plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=insurance_dataset)
plt.title('Sex Distribution')
plt.show()

insurance_dataset['sex'].value_counts()

# BMI distribution
plt.figure(figsize=(6,6))
sns.displot(insurance_dataset['bmi'])
plt.title('BMI Distribution')
plt.show()

# childeren column
plt.figure(figsize=(6,6))
sns.countplot(x='children',data=insurance_dataset)
plt.title('Children')
plt.show()

insurance_dataset['children'].value_counts()

# smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker',data=insurance_dataset)
plt.title('Smoker')
plt.show()

insurance_dataset['smoker'].value_counts()

# region column
plt.figure(figsize=(6,6))
sns.countplot(x='region',data=insurance_dataset)
plt.title('Region')
plt.show()

insurance_dataset['region'].value_counts()

# distribution of charges values

plt.figure(figsize=(6,6))
sns.displot(insurance_dataset['charges'])
plt.title('Charges Distribution')
plt.show()

"""Data Preprocessing

Encoding the dategorical features
"""

#encoding sex column
insurance_dataset.replace({'sex':{'male':0,'female':1}}, inplace= True)

#endoing 'smoker' column
insurance_dataset.replace({'smoker':{'yes':0,'no':1}}, inplace=True)

#encoding 'region' column
insurance_dataset.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

"""Splitting the features and target"""

X = insurance_dataset.drop(columns='charges', axis=1)
Y = insurance_dataset['charges']

print(X)

print(Y)

"""Solitting data into training data and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Linear Regression
"""

# loading the lineaer regression model

regressor = LinearRegression()

regressor.fit(X_train,Y_train)

"""Model Evaluation"""

# prediction ontraning data
training_data_prediction =regressor.predict(X_train)

# R^2 value
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print("R^2 value: ",r2_train)

# prediction on test data
test_data_prediction = regressor.predict(X_test)

# R^2 value for test data
r2_test = metrics.r2_score(Y_test, test_data_prediction)
print("R^2 value: ",r2_test)

"""Building a predicting system"""

input_data = (32,1,29.8,2,1,1)

# changing input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = regressor.predict(input_data_reshaped )
print(prediction)

print('The medical insurance cost in USD is: ', prediction[0])

